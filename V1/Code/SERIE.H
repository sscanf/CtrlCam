/*
** ###################################################################
**
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**
**     Filename  : SERIE.H
**
**     Project   : CtrlCam
** 
**     Processor : MC68HC908GP32CFB
**
**     Beantype  : AsynchroSerial
**
**     Version   : Bean 02.216, Driver 01.43, CPU db: 2.89.000
**
**     Compiler  : Metrowerks HC08 C Compiler
**
**     Date/Time : 9/15/miércoles, 10:49
**
**     Abstract  :
**
**         This bean "AsynchroSerial" implements an asynchronous serial
**         communication. The bean supports different settings of 
**         parity, word width, stop-bit and communication speed,
**         user can select interrupt or polling handler.
**         Communication speed can be changed also in runtime.
**         The bean requires one on-chip asynchronous serial channel.
**
**     Settings  :
**
**         Serial channel              : SCI
**
**         Protocol
**             Init baud rate          : 9600baud
**             Width                   : 8 bits
**             Stop bits               : 1
**             Parity                  : none
**             Breaks                  : Disabled
**
**         Registers
**             Input buffer            : SCDR      [24]
**             Output buffer           : SCDR      [24]
**             Control register        : SCC1      [19]
**             Mode register           : SCC2      [20]
**             Baud setting reg.       : SCBR      [25]
**             Special register        : SCS1      [22]
**
**         Input interrupt
**             Vector name             : INT_SCIReceive
**
**         Output interrupt
**             Vector name             : INT_SCITransmit
**
**         Used pins                   : 
**             ----------------------------------------------------
**               Function | On package |    Name
**             ----------------------------------------------------
**                Input   |     10     |  PTE1_RxD
**                Output  |     9      |  PTE0_TxD
**             ----------------------------------------------------
**
**
**
**     Contents  :
**
**         RecvChar        - byte SERIE_RecvChar(SERIE_TComData *Chr);
**         SendChar        - byte SERIE_SendChar(SERIE_TComData Chr);
**         RecvBlock       - byte SERIE_RecvBlock(SERIE_TComData *Ptr,word Size,word *Rcv);
**         SendBlock       - byte SERIE_SendBlock(SERIE_TComData *Ptr,word Size,word *Snd);
**         ClearRxBuf      - byte SERIE_ClearRxBuf(void);
**         ClearTxBuf      - byte SERIE_ClearTxBuf(void);
**         CharsInRxBuf    - byte SERIE_CharsInRxBuf(word *Chr);
**         GetCharsInRxBuf - word SERIE_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word SERIE_GetCharsInTxBuf(void);
**         GetError        - byte SERIE_GetError(SERIE_TError *Err);
**
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
**
** ###################################################################
*/

#ifndef __SERIE
#define __SERIE

/* MODULE SERIE. */

#include "Cpu.h"



#ifndef __BWUserType_tItem
#define __BWUserType_tItem
  typedef struct {                     /* Item of the index table for possible baudrates */
    word div;                          /* divisior */
    byte val;                          /* values of the prescalers */
  } tItem;
#endif
#ifndef __BWUserType_SERIE_TError
#define __BWUserType_SERIE_TError
  typedef union {
    byte err;
    struct {
      bool OverRun : 1;                /* Overrun error flag */
      bool Framing : 1;                /* Framing error flag */
      bool Parity : 1;                 /* Parity error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool Noise : 1;                  /* Noise error flag */
      bool Break : 1;                  /* Break detect */
      bool Idle : 1;                   /* Idle character detect */
    }errName;
  } SERIE_TError;                      /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
#endif
#ifndef __BWUserType_TDirection
#define __BWUserType_TDirection
  typedef enum {                       /*  */
    TXD_INPUT,
    TXD_OUTPUT
  } TDirection;
#endif

#ifndef __BWUserType_SERIE_TComData
#define __BWUserType_SERIE_TComData
  typedef byte SERIE_TComData ;        /* User type for communication. Size of this type depends on the communication data witdh. */
#endif


byte SERIE_RecvChar(SERIE_TComData *Chr);
/*
** ===================================================================
**     Method      :  SERIE_RecvChar (bean AsynchroSerial)
**
**     Description :
**         If any data received, this method returns one character,
**         otherwise it returns error code (it does not wait for
**         data). This method is enabled only if the receiver
**         property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error is detected
**                           ERR_FRAMING - Framing error is detected
**                           ERR_PARITY - Parity error is detected
**                           ERR_BREAK - Break character is detected
**                           ERR_IDLE - Idle character is detected
**                           (this error is hardware specific).
** ===================================================================
*/

byte SERIE_SendChar(SERIE_TComData Chr);
/*
** ===================================================================
**     Method      :  SERIE_SendChar (bean AsynchroSerial)
**
**     Description :
**         Send one character to the channel. This method is
**         available only if the transmitter property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte SERIE_RecvBlock(SERIE_TComData *Ptr,word Size,word *Rcv);
/*
** ===================================================================
**     Method      :  SERIE_RecvBlock (bean AsynchroSerial)
**
**     Description :
**         If any data received, this method returns the block ofthe
**         data and its lenght (and incidental error), otherwise it
**         returns error code (it does not wait for data).
**         This method is available only if non-zero lenght of the
**         input buffer is defined and the receiver property is
**         enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of received data
**         Size            - Size of the block
**       * Rcv             - Pointer to real number of the received
**                           data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error is detected
**                           ERR_FRAMING - Framing error is detected
**                           ERR_PARITY - Parity error is detected
**                           ERR_BREAK - Break character is detected
**                           ERR_IDLE - Idle character is detected
**                           (this error is hardware specific).
** ===================================================================
*/

byte SERIE_SendBlock(SERIE_TComData *Ptr,word Size,word *Snd);
/*
** ===================================================================
**     Method      :  SERIE_SendBlock (bean AsynchroSerial)
**
**     Description :
**         Send a block of characters to the channel.
**         This method is available only if non-zero lenght of the
**         output buffer is defined and the transmitter property is
**         enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of data to send
**         Size            - Size of the block
**       * Snd             - Pointer to number of data that are sent
**                           (moved to buffer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - It was not possible to send
**                           requested number of bytes
** ===================================================================
*/

byte SERIE_ClearRxBuf(void);
/*
** ===================================================================
**     Method      :  SERIE_ClearRxBuf (bean AsynchroSerial)
**
**     Description :
**         Clear receive buffer.
**         This method is available only if non-zero lenght of the
**         input buffer is defined and the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte SERIE_ClearTxBuf(void);
/*
** ===================================================================
**     Method      :  SERIE_ClearTxBuf (bean AsynchroSerial)
**
**     Description :
**         Clear transmit buffer.
**         This method is available only if non-zero lenght of the
**         output buffer is defined and the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte  SERIE_CharsInRxBuf(word *Chr);
/*
** ===================================================================
**     Method      :  SERIE_CharsInRxBuf (bean AsynchroSerial)
**
**     Description :
**         Return number of characters in the input buffer. This
**         method is available only if the receiver property is
**         enabled.
**         [deprecated method]
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to number of characters in the
**                           input buffer
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

word SERIE_GetCharsInRxBuf(void);
/*
** ===================================================================
**     Method      :  SERIE_GetCharsInRxBuf (bean AsynchroSerial)
**
**     Description :
**         Return number of characters in the input buffer. This
**         method is available only if the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the input
**                           buffer.
** ===================================================================
*/

word SERIE_GetCharsInTxBuf(void);
/*
** ===================================================================
**     Method      :  SERIE_GetCharsInTxBuf (bean AsynchroSerial)
**
**     Description :
**         Return number of characters in the output buffer. This
**         method is available only if the transmitter property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the output
**                           buffer.
** ===================================================================
*/

byte SERIE_GetError(SERIE_TError *Err);
/*
** ===================================================================
**     Method      :  SERIE_GetError (bean AsynchroSerial)
**
**     Description :
**         Return a set of errors on the channel (errors that cannot
**         be returned in given methods). The errors accumulate in a
**         set; after calling [GetError] this set is returned and
**         cleared.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Err             - Pointer to returned set of errors
**     Returns     :
**         ---             - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

__interrupt void SERIE_InterruptRx(void);
/*
** ===================================================================
**     Method      :  SERIE_InterruptRx (bean AsynchroSerial)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

__interrupt void SERIE_InterruptTx(void);
/*
** ===================================================================
**     Method      :  SERIE_InterruptTx (bean AsynchroSerial)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

__interrupt void SERIE_InterruptError(void);
/*
** ===================================================================
**     Method      :  SERIE_InterruptError (bean AsynchroSerial)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/


void SERIE_Init(void);
/*
** ===================================================================
**     Method      :  SERIE_Init (bean AsynchroSerial)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/


/* END SERIE. */

/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 03.23 for 
**     the Motorola HC08 series of microcontrollers.
**
** ###################################################################
*/

#endif /* ifndef __SERIE */
